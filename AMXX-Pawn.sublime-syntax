%YAML 1.2
---
name: AMXX-Pawn
file_extensions: [sma, inc, inl]
scope: source.sma
contexts:

  # "AMXX-Pawn Syntax v4.4"
  main:
    - include: pawn_string
    - include: pawn_character
    - include: pawn_coment
    - include: pawn_directives
    - include: pawn_numbers
    - include: pawn_keywords
    - include: pawn_function
    - include: pawn_post_keywords

    - include: parens
    - include: check_brackets

    # Constants
    - match: (true|false|EOS|cellmin|cellmax|cellbits|__DATE__|__TIME__|__LINE__|__BINARY__|__FILE__)
      scope: constant.language

  ########################################################

  # "PAWN Comments"
  pawn_coment:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.pawn
      captures:
        1: meta.toc-list.banner.block.pawn
    - match: /\*
      scope: punctuation.definition.comment.pawn
      push:
        - meta_scope: comment.block.pawn
        - match: \*/
          scope: punctuation.definition.comment.pawn
          pop: true
    - match: \*/
      scope: invalid.illegal.stray-comment-end.pawn
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.pawn
      captures:
        1: meta.toc-list.banner.line.pawn
    - match: '//'
      scope: punctuation.definition.comment.pawn
      push:
        - meta_scope: comment.line.pawn
        - match: $
          pop: true
  ########################################################

  # "Pawn Directives"
  pawn_directives:
    - match: ^\s*?#
      scope: meta.preprocessor
      push:
        - include: directive_others
        - include: directive_include
        - include: directive_define
        - include: pawn_coment
        - include: main

  directive_include:
    - match: (include|tryinclude)\s+((["][\t ]*[\w\-\/]*\.(inc|sma|inl)?[\t ]*["])|([<][\t ]*[\w\-\/]*[\t ]*[>])|([^\s]*))
      captures:
        1: meta.preprocessor.include.pawn
        3: meta.preprocessor.include.path.pawn
        4: meta.preprocessor.include.path.pawn
        5: meta.preprocessor.include.path.pawn
        6: invalid.illegal.preprocessor.pawn

  directive_define:
    - match: define\s+[a-zA-Z_]\w*
      scope: meta.preprocessor.define.pawn
      push:
        #- meta_scope: meta.preprocessor.define.multiline.pawn
        - include: main
        - include: define-multiline


  define-multiline:
    - meta_scope: meta.preprocessor.define.pawn
    - match: \\$\n
      scope: punctuation.separator.continuation.line.pawn meta.preprocessor.define.pawn
      set:
        - meta_scope: meta.preprocessor.define.multiline.pawn
        - include: main
        - include: define-multiline
    - match: $\n
      pop: true


  directive_others:
    - match: (if|elseif|else|endif|endinput|undef|endscript|error|file|line|tryinclude|emit|pragma|assert)\s+([^/]*)
      captures:
        1: meta.preprocessor.others.pawn
        2: entity.name.constant.preprocessor.pawn

  ########################################################

   # "PAWN String"
  pawn_string:
    - match: '"'
      scope: punctuation.definition.string.begin.pawn
      push:
      - meta_scope: string.quoted.double.pawn
      - match: '(")|(?<=^|[^\\])\s*(\n)'
        captures:
          1: punctuation.definition.string.end.pawn
          2: invalid.illegal.unexpected-end-of-line.pawn
        pop: true
      - include: string_escaped_char
      - include: string_placeholder

  string_escaped_char:
    - match: \^(\^|[abefnprtv\'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})
      scope: constant.character.escape.pawn
    - match: '\\[drywR]'
      scope: constant.character.escape.pawn
    - match: \^.
      scope: invalid.illegal.unknown-escape.pawn

  string_placeholder:
    - match: |-
        (?x)%
            ((-?\d+)|\*(-?\d+\$)?)?         # minimum field width
            (\.((-?\d+)|\*(-?\d+\$)?)?)?    # precision
            [cbdiufXxasLNn%]                # conversion type
      scope: constant.other.placeholder.pawn

  pawn_character:
    - match: ('[\^]?.')|('.(.+'))
      captures:
        1: string.quoted.single.pawn
        2: invalid.illegal.invalid-character.pawn
  ########################################################

  # "PAWN Function"
  pawn_function:
    - include: function_definition
    - include: function_call

  function_definition:
    - match: ^[\s;]*(public|stock|native|forward)\s+([A-Za-z_]\w*:\s*)?([A-Za-z_][\w_]*)[\s]*(\()
      captures:
        1: storage.modifier.function.pawn
        2: storage.modifier.tag
        3: support.function.pawn
        4: punctuation.section.group.begin function.parens.pawn
      push:
        - match: \)
          scope: punctuation.section.group.end function.parens.pawn
          pop: true
        - include: main
        
    - match: ^(([A-Za-z_]\w*)\s+)?([A-Za-z_]\w*:\s*)?([A-Za-z_][\w_]*)[\s]*(\()
      captures:
        2: storage.modifier.function.pawn
        3: storage.modifier.tag
        4: support.function.pawn
        5: punctuation.section.group.begin function.parens.pawn
      push:
        - match: \)
          scope: punctuation.section.group.end function.parens.pawn
          pop: true
        - include: main

    - match: ^(native|stock)\s+([A-Za-z_]\w*:)?\[\w*\]\s*?([A-Za-z_][\w_]*)[\s]*(\()
      captures:
        1: storage.modifier.function.pawn
        2: storage.modifier.tag
        3: support.function.pawn
        4: punctuation.section.group.begin function.parens.pawn
      push:
        - match: \)
          scope: punctuation.section.group.end function.parens.pawn
          pop: true
        - include: main

  function_call:
    - match: \s*([A-Za-z_][\w_]*)[\s]*(\()
      captures:
        1: variable.function.pawn
        2: punctuation.section.group.begin function.parens.pawn
      push:
        #- meta_content_scope: meta.function.params
        - match: \)
          scope: punctuation.section.group.end function.parens.pawn
          pop: true
        - include: main

  ########################################################

  # "PAWN Numbers"
  pawn_numbers:
    - match: '(\d+)(\.{2})(\d+)'
      captures:
        1: constant.numeric.int.pawn
        2: keyword.operator.switch-range.pawn
        3: constant.numeric.int.pawn

    - match: ([-]?0x[\da-fA-F]{1,8})
      scope: constant.numeric.hex.pawn

    - match: \b(\d+\.\d+)\b
      scope: constant.numeric.float.pawn

    - match: \b(\d+)\b
      scope: constant.numeric.int.pawn
  ########################################################

  # "PAWN Keywords"
  pawn_post_keywords:
    - match: '\b[A-Za-z_]\w*\::'
      scope: constant.numeric.int.pawn

    - match: '\b[A-Za-z_]\w*\:'
      scope: storage.modifier.tag

    - match: \s*\b(public|stock|native|forward)\b
      scope: storage.modifier.function.pawn

    - match: (\[|\]|)
      scope: meta.brackets

  pawn_keywords:
    - match: \s*(case)\s*(\d*)(\.\.)(\d*)\s*(:)\s*
      captures:
        1: keyword.control.pawn
        2: constant.numeric.int.pawn
        3: keyword.operator.ternary.pawn
        4: constant.numeric.int.pawn
        5: keyword.operator.ternary.pawn
    - match: \s*(case)\s*(\d*).*(:)\s*
      captures:
        1: keyword.control.pawn
        2: constant.numeric.int.pawn
        3: keyword.operator.ternary.pawn

    - match: \s*\b(enum)\b\s*([A-Za-z_]\w*)(\s*:\s*([A-Za-z_]\w*))?
      captures:
        1: keyword.control.pawn
        2: storage.modifier.tag

    - match: \s*\b(sizeof|tagof|charsmax|break|case|continue|default|do|else|for|goto|if|return|state|switch|while|assert|sleep)\b
      scope: keyword.control.pawn

    - match: \s*\b(Float|new|enum|char|const|static)\b
      scope: storage.type.vars.pawn

    - match: (any\:\.\.\.)
      scope: storage.modifier.tag.pawn

    - match: (\-|\+|\*|\/|%|&|\||\^|<<|>>)?=
      scope: keyword.operator.assignment.pawn

    - match: (==|!=|<=|>=|<>|<|>)
      scope: keyword.operator.comparison.pawn

    - match: (\-\-|\+\+)
      scope: keyword.operator.increment-decrement.pawn

    - match: (\?|:)
      scope: keyword.operator.ternary.pawn

    - match: (\-|\+|\*|\/|%)
      scope: keyword.operator.arithmetic.pawn

    - match: (!|&&|\|\|)
      scope: keyword.operator.logical.pawn

    - match: (~|&|\||\^|<<|>>)
      scope: keyword.operator.bitwise.pawn

    - match: (\,|;)
      scope: punctuation.separator.pawn

    - match: ({)
      scope: punctuation.section.block.begin
    - match: (})
      scope: punctuation.section.block.begin

  ########################################################


  # "Check Brackets Closed"
  parens:
    - match: \(
      scope: parens.pawn
      push:
        - match: \)
          scope: parens.pawn
          pop: true
        - include: main

  check_brackets:
    - match: \)
      scope: invalid.illegal.stray-bracket-end
  ########################################################