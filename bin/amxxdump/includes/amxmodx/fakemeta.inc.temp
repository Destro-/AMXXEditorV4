#if defined _fakemeta_included
#endinput
#endif
#define _fakemeta_included
#include <fakemeta_const> 
#pragma reqlib fakemeta
#if !defined AMXMODX_NOAUTOLOAD
#pragma loadlib fakemeta
#endif
native pev(_index,_value,any:...);
native set_pev(_index,_value,any:...);
native set_pev_string(_index, _value, _string);
native pev_valid(entindex);
native pev_serial(entindex);
native global_get(_value, any:...);
native get_pdata_int(_index, _Offset, _linuxdiff = 5, _macdiff = 5);
native set_pdata_int(_index, _Offset, _Value, _linuxdiff = 5, _macdiff = 5);
native Float:get_pdata_float(_index, _Offset, _linuxdiff = 5, _macdiff = 5);
native set_pdata_float(_index, _Offset, Float:_Value, _linuxdiff = 5, _macdiff = 5);
native get_pdata_ent(_index, _offset, _linuxdiff = 20, _macdiff = 20);
native set_pdata_ent(_index, _offset, _value, _linuxdiff = 20, _macdiff = 20);
native bool:get_pdata_bool(_index, _offset, _linuxdiff = 20, _macdiff = 20);
native set_pdata_bool(_index, _offset, bool:_value, _linuxdiff = 20, _macdiff = 20);
native get_pdata_byte(_index, _offset, _linuxdiff = 20, _macdiff = 20);
native set_pdata_byte(_index, _offset, _value, _linuxdiff = 20, _macdiff = 20);
native get_pdata_short(_index, _offset, _linuxdiff = 20, _macdiff = 20);
native set_pdata_short(_index, _offset, _value, _linuxdiff = 20, _macdiff = 20);
native get_pdata_vector(_index, _offset, Float:_output[3], _linuxdiff = 20, _macdiff = 20);
native set_pdata_vector(_index, _offset, Float:_origin[3], _linuxdiff = 20, _macdiff = 20);
native get_pdata_ehandle(_index, _offset, _linuxdiff = 20, _macdiff = 20);
native set_pdata_ehandle(_index, _offset, _value, _linuxdiff = 20, _macdiff = 20);
native register_forward(_forwardType,const _function[],_post=0);
native unregister_forward(_forwardType, registerId, post=0);
native forward_return(type,any:...);
native get_orig_retval(any:...);
native engfunc(type,any:...);
native dllfunc(type,any:...);
native get_tr(TraceResult:tr_member, any:...);
native set_tr(TraceResult:tr_member, any:...);
native get_tr2(tr_handle, any:tr_member, any:...);
native set_tr2(tr_handle, any:tr_member, any:...);
native create_tr2();
native free_tr2(tr_handle);
native get_kvd(kvd_handle, KeyValueData:member, any:...);
native set_kvd(kvd_handle, KeyValueData:member, any:...);
native create_kvd();
native free_kvd(kvd_handle);
native get_cd(cd_handle, ClientData:member, any:...);
native set_cd(cd_handle, ClientData:member, any:...);
native get_es(es_handle, EntityState:member, any:...);
native set_es(es_handle, EntityState:member, any:...);
native get_uc(uc_handle, UserCmd:member, any:...);
native set_uc(uc_handle, UserCmd:member, any:...);
native get_pdata_string(entity, offset, dest[], maxlength, byref=1, linux, mac=cellmin);
native set_pdata_string(entity, offset, const source[], realloc=2, linux, mac=cellmin);
native copy_infokey_buffer(infoBuffer, out[], maxlen);
native lookup_sequence(entity, const name[], &Float:framerate = 0.0, &bool:loops = false, &Float:groundspeed = 0.0);
native Float:set_controller(entity, controller, Float:value);
native any:get_ent_data(entity, const class[], const member[], element = 0);
native set_ent_data(entity, const class[], const member[], any:value, element = 0);
native Float:get_ent_data_float(entity, const class[], const member[], element = 0);
native set_ent_data_float(entity, const class[], const member[], Float:value, element = 0);
native get_ent_data_vector(entity, const class[], const member[], Float:value[3], element = 0);
native set_ent_data_vector(entity, const class[], const member[], Float:value[3], element = 0);
native get_ent_data_entity(entity, const class[], const member[], element = 0);
native set_ent_data_entity(entity, const class[], const member[], value, element = 0);
native get_ent_data_string(entity, const class[], const member[], value[], maxlen, element = 0);
native set_ent_data_string(entity, const class[], const member[], const value[], element = 0);
native get_ent_data_size(const class[], const member[]);
native find_ent_data_info(const class[], const member[], &FieldType:type = FIELD_NONE, &arraysize = 0, &bool:unsigned = false);
native any:get_gamerules_int(const class[], const member[], element = 0);
native set_gamerules_int(const class[], const member[], any:value, element = 0);
native Float:get_gamerules_float(const class[], const member[], element = 0);
native set_gamerules_float(const class[], const member[], Float:value, element = 0);
native get_gamerules_vector(const class[], const member[], Float:value[3], element = 0);
native set_gamerules_vector(const class[], const member[], Float:value[3], element = 0);
native get_gamerules_entity(const class[], const member[], element = 0);
native set_gamerules_entity(const class[], const member[], value, element = 0);
native get_gamerules_string(const class[], const member[], value[], maxlen, element = 0);
native set_gamerules_string(const class[], const member[], const value[], element = 0);
native get_gamerules_size(const class[], const member[]);
native find_gamerules_info(const class[], const member[], &FieldType:type = FIELD_NONE, &arraysize = 0, &bool:unsigned = false);
stock BaseFieldType:get_field_basetype(FieldType:type, type_name[] = "", maxlen = 0)
{
static const baseFieldTypeNames[BaseFieldType][] =
{
"none",
"integer",
"float",
"vector",
"entity",
"string",
};
new BaseFieldType:baseType = BASEFIELD_NONE;
switch (type)
{
case FIELD_INTEGER, FIELD_STRINGINT, FIELD_SHORT  , FIELD_CHARACTER,
FIELD_CLASS  , FIELD_STRUCTURE, FIELD_POINTER, FIELD_FUNCTION,
FIELD_BOOLEAN:
{
baseType = BASEFIELD_INTEGER;
}
case FIELD_FLOAT:
{
baseType = BASEFIELD_FLOAT;
}
case FIELD_VECTOR:
{
baseType = BASEFIELD_VECTOR;
}
case FIELD_CLASSPTR, FIELD_ENTVARS, FIELD_EDICT, FIELD_EHANDLE:
{
baseType = BASEFIELD_ENTITY;
}
case FIELD_STRINGPTR, FIELD_STRING:
{
baseType = BASEFIELD_STRING;
}
}
if (maxlen > 0)
{
copy(type_name, maxlen, baseFieldTypeNames[baseType]);
}
return baseType;
}
enum
{
Model_DefaultSize     = -2,
Model_CurrentSequence = -1,
};
native GetModelBoundingBox(entity, Float:mins[3], Float:maxs[3], sequence = Model_DefaultSize);
