#if defined _amxmodx_included
#endinput
#endif
#define _amxmodx_included
#include <core>
#include <float>
#include <amxconst>
#include <string>
#include <file>
#include <vault>
#include <lang>
#include <messages>
#include <vector>
#include <sorting>
#include <cellarray>
#include <cellstack>
#include <celltrie>
#include <datapack>
#include <newmenus>
#include <textparse_smc>
#include <textparse_ini>
#include <cvars>
#include <gameconfig>
forward plugin_init();
forward plugin_pause();
forward plugin_unpause();
forward server_changelevel(map[]);
forward plugin_cfg();
forward plugin_end();
forward plugin_log();
forward plugin_precache();
forward client_infochanged(id);
forward client_connect(id);
forward client_connectex(id, const name[], const ip[], reason[128]);
forward client_authorized(id, const authid[]);
#pragma deprecated Use client_disconnected() instead.
forward client_disconnect(id);
forward client_disconnected(id, bool:drop, message[], maxlen);
forward client_remove(id, bool:drop, const message[]);
forward client_command(id);
forward client_putinserver(id);
native register_plugin(const plugin_name[], const version[], const author[]);
native precache_model(const name[]);
native precache_sound(const name[]);
native precache_generic(const szFile[]);
native precache_event(type, const Name[], any:...);
native engine_changelevel(const map[]);
native set_user_info(index, const info[], const value[]);
native get_user_info(index, const info[], output[], len);
native set_localinfo(const info[], const value[]);
native get_localinfo(const info[], output[], len);
native show_motd(player, const message[], const header[] = "");
native client_print(index, type, const message[], any:...);
native client_print_color(index, sender, const message[], any:...);
native engclient_print(player, type, const message[], any:...);
native console_print(id, const message[], any:...);
native console_cmd(id, const cmd[], any:...);
native register_event(const event[], const function[], const flags[], const cond[] = "", ...);
native register_event_ex(const event[], const function[], RegisterEventFlags:flags, const cond[] = "", ...);
native enable_event(handle);
native disable_event(handle);
native register_logevent(const function[], argsnum, ...);
native enable_logevent(handle);
native disable_logevent(handle);
native set_hudmessage(red = 200, green = 100, blue = 0, Float:x = -1.0, Float:y = 0.35, effects = 0, Float:fxtime = 6.0, Float:holdtime = 12.0, Float:fadeintime = 0.1, Float:fadeouttime = 0.2, channel = -1, alpha1 = 0, color2[4] = {255, 255, 250, 0});
native show_hudmessage(index, const message[], any:...);
native set_dhudmessage(red = 200, green = 100, blue = 0, Float:x = -1.0, Float:y = 0.35, effects = 0, Float:fxtime = 6.0, Float:holdtime = 12.0, Float:fadeintime = 0.1, Float:fadeouttime = 0.2);
native show_dhudmessage(index, const message[], any:...);
native show_menu(index, keys, const menu[], time = -1, const title[] = "");
native read_data(value, any:...);
native read_datanum();
native read_datatype();
native read_logdata(output[], len);
native read_logargc();
native read_logargv(id, output[], len);
native parse_loguser(const text[], name[], nlen, &userid =-2, authid[] = "", alen = 0, team[] = "", tlen = 0);
native server_print(const message[], any:...);
native is_map_valid(const mapname[]);
native is_user_bot(index);
native is_user_hltv(index);
native is_user_connected(index);
native is_user_connecting(index);
native is_user_alive(index);
native is_dedicated_server();
native is_linux_server();
native is_jit_enabled();
native get_amxx_verstring(buffer[], length);
native get_user_attacker(index, ...);
native Float:get_user_aiming(index, &id, &body = HIT_GENERIC, dist = 9999);
native get_user_frags(index);
native get_user_armor(index);
native get_user_deaths(index);
native get_user_health(index);
native get_user_index(const name[]);
native get_user_ip(index, ip[], len, without_port = 0);
native user_has_weapon(index, weapon, setweapon = -1);
native get_user_weapon(index, &clip = 0, &ammo = 0);
native get_user_ammo(index, weapon, &clip, &ammo);
native num_to_word(num, output[], len);
native get_user_team(index, team[] = "", len = 0);
native get_user_time(index, flag = 0);
native get_user_ping(index, &ping, &loss);
native get_user_origin(index, origin[3], mode = 0);
native get_user_weapons(index, weapons[32], &num);
native get_weaponname(id, weapon[], len);
native get_user_name(index, name[], len);
native get_user_authid(index, authid[], len);
native get_user_userid(index);
native user_slap(index, power, rnddir = 1);
native user_kill(index, flag = 0);
native log_amx(const string[], any:...);
native log_message(const message[], any:...);
native elog_message(const message[], any:...);
native log_to_file(const file[], const message[], any:...);
native get_playersnum(flag = 0);
native get_players(players[MAX_PLAYERS], &num, const flags[] = "", const team[] = "");
native read_argv(id, output[], len);
native read_argv_int(id);
native Float:read_argv_float(id);
native read_args(output[], len);
native read_argc();
native read_flags(const flags[]);
native get_flags(flags, output[], len);
native find_player(const flags[], ...);
native find_player_ex(FindPlayerFlags:flags, ...);
native remove_quotes(text[]);
native client_cmd(index, const command[], any:...);
native engclient_cmd(index, const command[], const arg1[] = "", const arg2[] = "");
native amxclient_cmd(index, const command[], const arg1[] = "", const arg2[] = "");
native server_cmd(const command[], any:...);
native get_mapname(name[], len);
native get_timeleft();
native Float:get_gametime();
native get_maxplayers();
native get_modname(name[], len);
native get_time(const format[], output[], len);
native format_time(output[], len, const format[], time = -1);
native get_systime(offset = 0);
native parse_time(const input[], const format[], time = -1);
native set_task(Float:time, const function[], id = 0, const any:parameter[] = "", len = 0, const flags[] = "", repeat = 0);
native remove_task(id = 0, outside = 0);
native change_task(id = 0, Float:newTime = 1.0, outside = 0);
native task_exists(id = 0, outside = 0);
native set_user_flags(index, flags = -1, id = 0);
native get_user_flags(index, id = 0);
native remove_user_flags(index, flags = -1, id = 0);
native register_clcmd(const client_cmd[], const function[], flags = -1, const info[] = "", FlagManager = -1, bool:info_ml = false);
native register_concmd(const cmd[], const function[], flags = -1, const info[] = "", FlagManager = -1, bool:info_ml = false);
native register_srvcmd(const server_cmd[], const function[], flags = -1, const info[] = "", bool:info_ml = false);
native get_clcmd(index, command[], len1, &flags, info[], len2, flag, &bool:info_ml = false);
native get_clcmdsnum(flag);
native get_srvcmd(index, server_cmd[], len1, &flags, info[], len2, flag, &bool:info_ml = false);
native get_srvcmdsnum(flag);
native get_concmd(index, cmd[], len1, &flags, info[], len2, flag, id = -1, &bool:info_ml = false);
native get_concmd_plid(cid, flag_mask, id_type);
native get_concmdsnum(flag, id = -1);
native register_menuid(const menu[], outside = 0);
native register_menucmd(menuid, keys, const function[]);
native get_user_menu(index, &id, &keys);
native server_exec();
native emit_sound(index, channel, const sample[], Float:vol, Float:att, flags, pitch);
native Float:random_float(Float:a, Float:b);
native random_num(a, b);
native get_user_msgid(const name[]);
native get_user_msgname(msgid, name[], len);
native get_xvar_id(const name[]);
native xvar_exists(const name[]);
native get_xvar_num(id);
native Float:get_xvar_float(id);
native set_xvar_num(id, value = 0);
native set_xvar_float(id, Float:value = 0.0);
native is_module_loaded(const name[]);
native get_module(id, name[], nameLen, author[], authorLen, version[], versionLen, &status);
native get_modulesnum();
native is_plugin_loaded(const name[], bool:usefilename = false);
native get_plugin(index, filename[] = "", len1 = 0, name[] = "", len2 = 0, version[] = "", len3 = 0, author[] = "", len4 = 0, status[] = "", len5 = 0, ...);
native get_pluginsnum();
native pause(const flag[], const param1[] = "", const param2[] = "");
native unpause(const flag[], const param1[] = "", const param2[] = "");
native callfunc_begin(const func[], const plugin[] = "");
native callfunc_begin_i(func, plugin = -1);
native get_func_id(const funcName[], pluginId = -1);
native callfunc_push_int(value);
native callfunc_push_float(Float: value);
native callfunc_push_intrf(&value);
native callfunc_push_floatrf(&Float:value);
native callfunc_push_str(const VALUE[], bool:copyback = true);
native callfunc_push_array(const VALUE[], array_size, bool:copyback = true);
native callfunc_end();
forward inconsistent_file(id, const filename[], reason[64]);
native force_unmodified(force_type, const mins[3], const maxs[3], const filename[]);
#pragma deprecated Use hash_string() function. Also, see Hash_* constants.
native md5(const szString[], md5buffer[34]);
#pragma deprecated Use hash_file() function. Also, see Hash_* constants.
native md5_file(const file[], md5buffer[34]);
native hash_string(const string[], const HashType:type, output[], const outputSize);
native hash_file(const fileName[], const HashType:type, output[], const outputSize);
native plugin_flags(hdr = 0, plid = -1);
#pragma deprecated Module dependency is now automatically handled by the compiler. This forward is no longer called.
forward plugin_modules();
#pragma deprecated Module dependency is now automatically handled by the compiler. This native has no effect.
native require_module(const module[]);
#pragma deprecated AMXX is not shipping 64bits builds anymore. This native is basically guaranteed to return 0.
native is_amd64_server();
native find_plugin_byfile(const filename[], ignoreCase = 1);
forward plugin_natives();
native register_native(const name[], const handler[], style = 0);
native register_library(const library[]);
native log_error(error, const fmt[], any:...);
native param_convert(num);
native get_string(param, dest[], maxlen);
native set_string(param, dest[], maxlen);
native get_param(param);
native Float:get_param_f(param);
native get_param_byref(param);
native Float:get_float_byref(param);
native set_param_byref(param, value);
native set_float_byref(param, Float:value);
native get_array(param, dest[], size);
native get_array_f(param, Float:dest[], size);
native set_array(param, const source[], size);
native set_array_f(param, const Float:source[], size);
native set_error_filter(const handler[]);
native dbg_trace_begin();
native dbg_trace_next(trace);
native dbg_trace_info(trace, &line, function[], maxLength1, file[], maxLength2);
native dbg_fmt_error(buffer[], maxLength);
native set_native_filter(const handler[]);
native set_module_filter(const handler[]);
native abort(error, const fmt[] = "", any:...);
native module_exists(const logtag[]);
native LibraryExists(const library[], LibType:type);
native next_hudchannel(player);
native CreateHudSyncObj(num = 0, ...);
native ShowSyncHudMsg(target, syncObj, const fmt[], any:...);
native ClearSyncHud(target, syncObj);
native int3();
native set_fail_state(const fmt[], any:...);
native get_var_addr(any:...);
native get_addr_val(addr);
native set_addr_val(addr, val);
native CreateMultiForward(const name[], stop_type, ...);
native CreateOneForward(plugin_id, const name[], ...);
native PrepareArray(const array[], size, copyback = 0);
native ExecuteForward(forward_handle, &ret = 0, any:...);
native DestroyForward(forward_handle);
native arrayset(any:array[], any:value, size);
native get_weaponid(const name[]);
native admins_push(const AuthData[], const Password[], Access, Flags);
native admins_num();
native admins_lookup(num, AdminProp:Property, Buffer[] = "", BufferSize = 0);
native admins_flush();
native bool:has_map_ent_class(const classname[]);
forward OnConfigsExecuted();
forward OnAutoConfigsBuffered();
native AutoExecConfig(bool:autoCreate = true, const name[] = "", const folder[] = "");
native RequestFrame(const callback[], any:data = 0);
#include <message_stocks>
